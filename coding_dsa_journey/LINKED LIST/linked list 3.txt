// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
  public:
  int data;
  Node* next;
  Node* prev;
  Node(int value){
      data = value;
      next = NULL;
      prev  = NULL;
  }
};

// traversing Doubly LL

void printNode(Node* head){
    Node* curr = head;
    while(curr!=NULL){
        cout<<curr->data<<" ";
        curr = curr->next;
    }
}
//inserting node at the begining of the doubly LL
Node* insertBegin(Node* head , int val){
    Node* temp = new Node(val);
    Node* curr = head;
    //if head is null no need to change previous of head.
    if(curr == NULL){
        temp->next = head;
        return temp;
    }
    else{
        temp->next = curr;
        curr->prev = temp;
        return temp;
    }
}
// deleting node at the begining in doubly LL
Node* deleteBegin(Node* head){
    if(head == NULL){
        return head;
    }
    Node* temp = head->next;
    delete(head);
    if(temp!=NULL){
        temp->prev = NULL;
    }
    return temp;
}

//deleting node at the last of doubly LL

Node* deleteEnd(Node* head){
    Node* curr = head;
    if(head == NULL){
        return NULL;
    }
    else if(head->next == NULL){
        delete(head);
        return NULL;
    }
    else{
    // METHOD-2
        while(curr->next!=NULL){
            curr = curr->next;
        }
        curr->prev->next = NULL;
        delete(curr);
        return head;
    // METHOD-1
        // while(curr->next->next != NULL){
        //     curr = curr->next;
        // }
        // delete(curr->next);
        // curr->next = NULL;
        // return head;
    }
}

// reversing a Doubly LL

Node* reverse(Node* head){
    Node* curr  = head;
    if(curr == NULL || curr->next == NULL) return head;
    Node* prev = NULL;
    while(curr!=NULL){
    prev = curr->prev;
    curr->prev = curr->next;
    curr->next = prev;
    curr = curr->prev;
    }
    return prev->prev;
}

int main() {
 Node* head = new Node(10);
 Node* second = new Node(20);
 head->next = second;
 second->prev = head;
 Node* third = new Node(30);
 second->next = third;
 third->prev = second;
//  head = insertBegin(head , 40);
//  cout<<head->next<<" "<<head->prev<<endl;
// head = reverse(head);
// head = deleteBegin(head);
head = deleteEnd(head);
 printNode(head);
    return 0;
}


