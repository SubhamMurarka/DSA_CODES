// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node(int val){
        data = val;
        next = NULL;
    }
};

// TRAVERSING CIRCULAR LL

void printNode(Node* head){
    // METHOD 1
    /*Node* curr = head;
    if(curr == NULL){
        return;
    }
    cout<<curr->data<<" ";
    curr = curr->next;
    while(curr!=head){
        cout<<curr->data<<" ";
        curr = curr->next;
    }*/
    //METHOD 2
    Node* curr = head;
    if (curr == NULL){
        return;
    }
    do{
        cout<<curr->data<<" ";
        curr = curr->next;
    }while(curr!=head);
}

// INSERTING AT BEGINING OF CIRCULAR LL

Node* insertBegin(Node* head , int value){
   Node* temp = new Node(value);
   Node* curr = head;
    // METHOD 1
    /*if(curr==NULL){
        temp->next = temp;
        return temp;
    }
    while(curr->next!=head){
        curr = curr->next;
    }
    temp->next = head;
    curr->next = temp;
    return temp;*/
    
    //METHOD 2 (WE NEED TO PASS TAIL POINTER IN FUNCT.)
    
   /* Node* insertBegin(Node* head , int value , Node* tail)
   if(curr==NULL){
        temp->next = temp;
        return temp;
    }
    tail->next = temp;
    temp->next = curr;
    return temp;*/
    
    //METHOD 3 (BY SWAPPING)
    if(curr==NULL){
        temp->next = temp;
        return temp;
    }
    else{
        Node* p  = curr->next;
        curr->next = temp;
        temp->next = p;
        int t = curr->data;
        curr->data = temp->data;
        temp->data  = t;
        return head;
    }
        
}

// INSERTING AT END OF CIRCULAR LL

Node* insertEnd(Node* head , int val){
    Node* temp  = new Node(val);
    Node* curr = head;
    if(head==NULL){
        temp->next = temp;
        return temp;
    }
    
    // METHOD-1
    
    /*while(curr->next!=head){
        curr = curr->next;
    }
    curr->next = temp;
    temp->next =  head;
    return head;*/
    
    // METHOD-2 (BY PASSING TAIL POINTER SAME AS ABOVE)
    
    //METHOD-3 (by swapping) -> POSITION OF HEAD CHANGES
    
    Node* p = curr->next;
    curr->next = temp;
    temp->next = p;
    int t = curr->data;
    curr->data = temp->data;
    temp->data = t;
    return temp ;  // head->next
}

// DELETING HEAD OF CIRCULAR LL

Node* deleteBegin(Node* head){
    if(head==NULL){
        return NULL;
    }
    else if(head->next==NULL){
        delete(head);
        return NULL;
    }
    
    // METHOD-1 
    
    // else{
    //     Node* curr = head;
    //     Node* temp = curr->next;
    //      while(curr->next!=head){
    //         curr = curr->next;
    //     }
    //     delete(head);
    //     curr->next = temp;
    //     return temp;
    // }
    
    // METHOD-2 (BY PASSING TAIL POINTER AS ABOVE IN INSERTION)
   
    // *** METHOD-3 (BY trick{changing values , edge break , delete})
    
    else{
      head->data = head->next->data;
      Node* temp = head->next;
      head->next = head->next->next;
      delete(temp);
      return head;
    }
}

// DELETING NODE AT POSITION K

Node* deleteAnyNode(Node* head , int k)
{
    if(head->next == NULL){
        delete(head);
        return NULL;
    }
    else if(k==1){
        head->data  = head->next->data;
        Node* temp = head->next->next;
        delete(head->next);
        head->next = temp;
        return head;
    }
    else{
        Node* curr = head;
        int i = 0;
        
        //finding a node before Kth pos
        
        while(i!=k-2){
            curr=curr->next;
            i++;
        }
        Node* temp = curr->next->next;
        delete(curr->next);
        curr->next = temp;
        return head;
    }    
}
int main() {
    Node* head = new Node(10);
    Node* second = new Node(20);
    head->next = second;
    Node* third = new Node(30);
    second->next = third;
    Node* forth = new Node(40);
    third->next = forth;
    forth->next = head;
    
    // FOR METHOD-2(INSERT AT BEGIN TO RETURN TAIL)
    // Node* curr = head;
    // while(curr->next!=head){
    //     curr = curr->next;
    // }
    
    // head = insertBegin(head , 50);
    // head = insertEnd(head , 50);
    // head = deleteBegin(head);
    head = deleteAnyNode(head , 2);
    printNode(head);
    return 0;
}