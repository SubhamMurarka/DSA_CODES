//{ Driver Code Starts
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <stack>
using namespace std;
/* Link list Node */
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};




// } Driver Code Ends
/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
------------------------------------------------------------------------------------------------------------------------------------------------
class Solution{
  public:
    //Function to check whether the list is palindrome.
    Node* find_middle(Node* temp){
        Node* slow = temp;
        Node* fast = temp;
        while(fast->next!=NULL && fast->next->next!=NULL){    // **to find second middle in even ll use fast!=NULL instead of fast->next->next!=NULL**
            slow=slow->next;                                  // here finding first middle element
            fast = fast->next->next;
        }
        return slow;
    }
    Node* reverse(Node* midnext){
        Node* prev = NULL;
        Node* curr = midnext;
        while(curr!=NULL){
            Node* Next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = Next;
        }
        return prev;
    }
    bool isPalindrome(Node *head)
    {
        //Your code here
        // Method 1 -> Naive Method
    //   vector<int>vec;
    //   Node* curr = head;
    //   while(curr!=NULL){
    //       vec.push_back(curr->data);
    //       curr=curr->next;
    //   }
    //   vector<int>rev = vec;
    //   reverse(rev.begin(),rev.end());
    //   if(rev==vec) return true;
    //   return false;
    
    // Method 2 (using stacks)---------> Naive Method
    // stack<int>st;
    // for(Node* curr = head; curr!=NULL; curr=curr->next){
    //     st.push(curr->data);
    // }
    // for(Node* curr = head;curr!=NULL;curr=curr->next){
    //     if(st.top()!=curr->data)
    //     {
    //         return false;
    //     }
    //     st.pop();
    // }
    // return true;
    
    // Method-3 finding middle and reverse on other side
    if(head==NULL) return 0;
    Node* mid = find_middle(head);
    Node* second = reverse(mid->next);
    Node* first = head;
    while(second!=NULL){
        if(first->data!=second->data) return false;
        first = first->next;
        second = second->next;
    }
    return true;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------


//{ Driver Code Starts.
/* Driver program to test above function*/
int main()
{
  int T,i,n,l,firstdata;
    cin>>T;
    while(T--)
    {
        
        struct Node *head = NULL,  *tail = NULL;
        cin>>n;
        // taking first data of LL
        cin>>firstdata;
        head = new Node(firstdata);
        tail = head;
        // taking remaining data of LL
        for(i=1;i<n;i++)
        {
            cin>>l;
            tail->next = new Node(l);
            tail = tail->next;
        }
    Solution obj;
   	cout<<obj.isPalindrome(head)<<endl;
    }
    return 0;
}


// } Driver Code Ends