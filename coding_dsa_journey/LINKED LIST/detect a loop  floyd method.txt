//{ Driver Code Starts
//Initial template code for C++

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node* next;
    
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

void loopHere(Node* head, Node* tail, int position)
{
    if(position==0) return;
    
    Node* walk = head;
    for(int i=1; i<position; i++)
        walk = walk->next;
    tail->next = walk;
}


// } Driver Code Ends
//User function template for C++

/*

struct Node
{
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }

*/
______________________________________________________________________________________---
class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        // your code here
        // Method 1(ll linking destroyed)
       
    //   Node* curr = head;
    //   Node* temp = new Node(0);
    //   while(curr!=NULL){
    //       if(curr->next == NULL){
    //           return false;
    //       }
    //       if(curr->next == temp){
    //           return true;
    //       }
    //       Node* curr_next = curr->next;
    //       curr->next = temp;
    //       curr = curr_next;
    //   }
    //   return false;
    
    // Method 2 (Hashing , sc = o(n))
    
    // unordered_set <Node*> Nodes;
    // for(Node* curr = head; curr!=NULL; curr=curr->next){
    //     if(Nodes.find(curr)!=Nodes.end()){
    //         return true;
    //     }
    //     Nodes.insert(curr);
    // }
    // return false;
    
    // Method 3 (floyd cycle detection)
    
    Node* slow = head;
    Node* fast = head;
    while(fast!=NULL && fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
        if(fast==slow){
            return true;
        }
    }
    return false;
    }
};
____________________________________________________________________________________________

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, num;
        cin>>n;
        
        Node *head, *tail;
        cin>> num;
        head = tail = new Node(num);
        
        for(int i=0 ; i<n-1 ; i++)
        {
            cin>> num;
            tail->next = new Node(num);
            tail = tail->next;
        }
        
        int pos;
        cin>> pos;
        loopHere(head,tail,pos);
        
        Solution ob;
        if(ob.detectLoop(head) )
            cout<< "True\n";
        else
            cout<< "False\n";
    }
	return 0;
}

// } Driver Code Ends