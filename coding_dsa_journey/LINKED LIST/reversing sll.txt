#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
#define ff              first
#define ss              second
#define ll              long long          
#define ps(x,y)         fixed<<setprecision(y)<<x
#define w(t)            int t; cin>>t; while(t--)
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
 
 
void ip_op()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}

class Node{
public:
    int data;
    Node* next;
    Node(int value){
        data = value;
        next = NULL;
    }
};

// REVERSING A SINGLY LINKED LIST

 Node* reverseSll(Node* head){

// METHOD 1 (NAIVE APPROACH)

 //    vector<int> nod;
 //    Node* curr = head;
 //    while(curr!=NULL){
 //        nod.push_back(curr->data); // copying data in vector
 //        curr = curr->next;
 //    }
 //    curr = head;
 //    int len = nod.size()-1;
 //    while(curr!=NULL && len>=0){
 //        curr->data = nod[len];    // adding data to LL from back
 //        curr = curr->next;
 //        len--;
 //    }

 // return head;

 // METHOD 2 

    Node* curr = head;
    Node* prev = NULL;

    while(curr!=NULL){
        Node* nxt = curr->next;
        curr->next = prev;
        prev = ;
        curr = 
    }


 }
 void printNode(Node*head){
    Node* curr = head;
    while(curr!=NULL){
        cout<<curr->data<<" ";
        curr = curr->next;
    }
 }

int main()
{
    ip_op();
    Node* head = new Node(10);
    Node* second = new Node(20);
    head->next = second;
    Node* third = new Node(30);
    second->next = third;
    Node* forth = new Node(40);
    third->next = forth;
    Node* fifth = new Node(50);
    forth->next = fifth;
    head = reverseSll(head);
    printNode(head);
    return 0;
}