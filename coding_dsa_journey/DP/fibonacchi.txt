
#include <bits/stdc++.h>
using namespace std;

// code-1 -> MEMOIZATION
// TC => O(n)  SC => O(n)(recursion stack) + O(n)(array)
// int fib(int n,vector<int>&dp){
//     if(n<=1) return n;
//     if(dp[n]!=-1) return dp[n];
//     return dp[n] = fib(n-1,dp)+fib(n-2,dp);
// }

//code-2 -> OPTIMISING SPACE  (tabulation)
// TC => O(n)  SC => O(n)(array) XX[O(n) recursion stack]XX
// int fib(int n, vector<int>&dp){
//     dp[0]=0;dp[1]=1;
//     for(int i=2; i<=n; i++){
//         dp[i] = dp[i-1] + dp[i-2];
//     }
//     return dp[n];
// }

// code-3 -> FURTHER OPTIMISING SPACE TO O(1)
// TC => O(n)
int fib(int n, vector<int>&dp){
    int prev=1,prev2=0;
    for(int i=2;i<=n;i++){
        int curri = prev+prev2;
        prev2=prev;
        prev=curri;
    }
    return prev;
}
int main() {
   int n;cin>>n;
   vector<int>dp(n+1,-1);
   cout<<fib(n,dp);
   return 0;
}